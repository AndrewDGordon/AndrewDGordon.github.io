{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions/./src/functions/360Giving.ts","webpack://excel-custom-functions/./src/functions/findThatCharity.ts","webpack://excel-custom-functions/./src/functions/types.ts","webpack://excel-custom-functions/webpack/bootstrap","webpack://excel-custom-functions/webpack/startup"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\nimport {\n  Card,\n  ExcelValue,\n  ExcelArray,\n  ExcelDouble,\n  ExcelEntity,\n  ExcelError,\n  ExcelFormattedNumber,\n  ExcelString,\n  //is_ExcelEntity,\n  //is_ExcelArray,\n} from \"./types\";\nimport { nullErrorValue, mk_ExcelArray, mk_ExcelString, mk_ExcelDouble } from \"./types\";\nimport { value_to_excel, number_to_amount, string_to_date } from \"./types\";\n\ntype Grant = {\n  grant_id: string;\n  data: GrantData;\n};\ntype GrantData = {\n  id: string;\n  title: string;\n  currency: string;\n  awardDate: string;\n  dataSource: string;\n  description: string;\n  dateModified: string;\n  plannedDates: Array<{\n    endDate: string;\n    duration: number;\n    startDate: string;\n  }>;\n  amountAwarded: number;\n  grantProgramme: Array<{\n    title: string;\n  }>;\n  fundingOrganization: Array<{\n    id: string;\n    name: string;\n  }>;\n  recipientOrganization: Array<{\n    id: string;\n    name: string;\n    location: Array<{\n      name: string;\n      geoCode: string;\n      geoCodeType: string;\n    }>;\n    charityNumber: string;\n  }>;\n};\n\ninterface PageData {\n  count: number;\n  results: Array<{ [key: string]: any }>;\n  next?: string;\n}\n\n// Fetches a paginated list of results from a URL.  May throw exception.\ntype Results = Array<{ [key: string]: any }>;\nconst cache: { [url: string]: Results } = {};\nasync function fetchPaginatedList(url: string): Promise<Results | Error> {\n  const options = {\n    method: \"GET\",\n  };\n\n  if (cache[url]) {\n    console.log(`Cache hit for ${url}`);\n    return cache[url];\n  }\n\n  const results: Results = [];\n  let page = 0;\n  let cursor: string | null = url;\n  while (cursor !== null) {\n    const start = Date.now();\n\n    // Wait at least half a second before each request to not go over the usage limit\n    await new Promise((resolve) => setTimeout(resolve, 600));\n\n    const response = await fetch(cursor, options);\n\n    if (!response.ok) {\n      console.error(`Error! status: ${response.status}`);\n      cursor = null;\n      continue;\n    }\n\n    const data: PageData = await response.json();\n    const end = Date.now();\n\n    page += 1;\n    console.log(`Fetched page ${page} in ${(end - start) / 1000}s from ${cursor} count ${data.count}`);\n\n    results.push(...data.results);\n    cursor = data.next || null;\n  }\n\n  cache[url] = results; // Cache the results for the current URL\n  return results;\n}\n\nlet promiseChain: Promise<Results | Error> = Promise.resolve([]);\n\nasync function fetchPaginatedListSequentially(url: string | null): Promise<Results | Error> {\n  const result = promiseChain.then(() => fetchPaginatedList(url));\n  // Ensure the next call waits for the current call to finish\n  promiseChain = result.catch(() => new Error(\"Error: unexpected exception\")); // unsure if this needed\n  return result;\n}\n\nconst provider360Giving = {\n  description: \"360Giving\", // Name of the data provider. Displays as a tooltip when hovering over the logo. Also displays as a fallback if the source address for the image is broken.\n  logoSourceAddress:\n    \"https://www.threesixtygiving.org/wp-content/themes/360giving2020/assets/images/360-logos/360giving-main.svg\", // Source URL of the logo to display.\n  logoTargetAddress: \"https://360Giving.org\", // Destination URL that the logo navigates to when selected.\n};\n\n/**\n * Grants received\n * @customfunction\n * @param {string} org_id\n * @returns {any} Results of the query.\n */\nasync function grants_received(org_id: string) {\n  const API_URL = \"https://api.threesixtygiving.org/api/v1/\";\n  const url = API_URL + \"org/\" + org_id + \"/grants_received/?limit=100\";\n  const value = await fetchPaginatedListSequentially(url);\n  if (value instanceof Error) {\n    return {\n      type: \"Entity\",\n      text: `${org_id} not known to have received grants`,\n      properties: { error: value.message },\n      provider: provider360Giving,\n    };\n  }\n  const grants: Grant[] = value as Grant[];\n  return {\n    type: \"Entity\",\n    text: `${org_id} received ${value.length} grants`,\n    properties: {\n      grants: mk_ExcelArray(grants.map((grant) => [grant_to_excel(grant)])),\n    },\n    provider: {\n      description: `${org_id} on 360Giving`, // Name of the data provider. Displays as a tooltip when hovering over the logo. Also displays as a fallback if the source address for the image is broken.\n      logoSourceAddress:\n        \"https://www.threesixtygiving.org/wp-content/themes/360giving2020/assets/images/360-logos/360giving-main.svg\", // Source URL of the logo to display.\n      logoTargetAddress: \"https://grantnav.threesixtygiving.org/org/\" + org_id, // Destination URL that the logo navigates to when selected.\n    },\n  };\n}\n\n/**\n * Grants made\n * @customfunction\n * @param {string} org_id\n * @returns {any} Results of the query.\n */\nasync function grants_made(org_id: string) {\n  const API_URL = \"https://api.threesixtygiving.org/api/v1/\";\n  const url = API_URL + \"org/\" + org_id + \"/grants_made/?limit=100\";\n  const value = await fetchPaginatedListSequentially(url);\n  if (value instanceof Error) {\n    return {\n      type: \"Entity\",\n      text: `${org_id} not known to have made grants`,\n      properties: { error: value.message },\n      provider: provider360Giving,\n    };\n  }\n  const grants: Grant[] = value as Grant[];\n  return {\n    type: \"Entity\",\n    text: `${org_id} made ${value.length} grants`,\n    properties: {\n      grants: mk_ExcelArray(grants.map((grant) => [grant_to_excel(grant)])),\n    },\n    provider: {\n      description: `${org_id} on 360Giving`, // Name of the data provider. Displays as a tooltip when hovering over the logo. Also displays as a fallback if the source address for the image is broken.\n      logoSourceAddress:\n        \"https://www.threesixtygiving.org/wp-content/themes/360giving2020/assets/images/360-logos/360giving-main.svg\", // Source URL of the logo to display.\n      logoTargetAddress: \"https://grantnav.threesixtygiving.org/org/\" + org_id, // Destination URL that the logo navigates to when selected.\n    },\n  };\n}\n\n// TODO cut this code\nasync function who_funds_with_who_obsolete(grants_column: string[][]) {\n  const result: [ExcelString, ExcelString][] = [];\n  const N = grants_column.length;\n  for (let r = 0; r < N; r++) {\n    const csv = grants_column[r][0];\n    const arr: string[] = csv.split(\";\");\n    // calculate all permutations in funder pairs\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length; j++) {\n        if (i !== j) {\n          result.push([mk_ExcelString(arr[i]), mk_ExcelString(arr[j])]);\n        }\n      }\n    }\n  }\n  // declare empty dictionary that maps two strings to a count\n  var dict: { [key: string]: number } = {};\n  for (let i = 0; i < result.length; i++) {\n    const [a, b] = result[i];\n    const key = a.basicValue + \";\" + b.basicValue;\n    dict[key] = (dict[key] || 0) + 1;\n  }\n\n  // enumerate the dictionary\n  const outcome: [ExcelString, ExcelString, ExcelDouble][] = [];\n  for (const [key, value] of Object.entries(dict)) {\n    const arr: string[] = key.split(\";\");\n    outcome.push([mk_ExcelString(arr[0]), mk_ExcelString(arr[1]), mk_ExcelDouble(value)]);\n  }\n\n  const entity = {\n    type: \"Entity\",\n    text: `Who funds with who`,\n    properties: {\n      who_funds_with_who: mk_ExcelArray(outcome),\n    },\n  };\n  return entity;\n}\n\nfunction grant_to_excel(grant: Grant): ExcelValue {\n  const data = grant.data;\n  const amountAwarded: ExcelValue = number_to_amount(data.amountAwarded, data.currency);\n  const funder = data.fundingOrganization.map((org) => org.name).join(\",\");\n  const recipient = data.recipientOrganization.map((org) => org.name).join(\",\");\n  const funder_id = data.fundingOrganization.map((org) => org.id).join(\",\");\n  const recipient_id = data.recipientOrganization.map((org) => org.id).join(\",\");\n  const entity: ExcelEntity = {\n    type: \"Entity\",\n    basicType: \"Error\",\n    basicValue: \"#VALUE!\",\n    text: data.title,\n    properties: {\n      title: mk_ExcelString(data.title),\n      awardDate: string_to_date(data.awardDate) as ExcelValue,\n      funder: mk_ExcelString(funder),\n      recipient: mk_ExcelString(recipient),\n      amountAwarded: amountAwarded,\n      description: mk_ExcelString(data.description),\n      grant_id: mk_ExcelString(grant.grant_id),\n      funder_id: mk_ExcelString(funder_id),\n      recipient_id: mk_ExcelString(recipient_id),\n      grant_nav: mk_ExcelString(\"https://grantnav.threesixtygiving.org/grant/\" + grant.grant_id),\n      //raw_grant_data: value_to_excel(grant),\n    },\n    layouts: {\n      compact: { icon: \"Gift\" },\n      card: {\n        title: { property: \"title\" },\n        sections: [\n          {\n            layout: \"List\",\n            properties: [\"awardDate\", \"funder\", \"recipient\", \"amountAwarded\", \"description\"],\n          },\n          {\n            layout: \"List\",\n            title: \"More\",\n            properties: [\"grant_id\", \"funder_id\", \"recipient_id\", \"grant_nav\", ], // \"raw_grant_data\"\n            collapsible: true,\n            collapsed: true,\n          },\n        ],\n      },\n    },\n    provider: {\n      description: data.title + \" on 360Giving GrantNav\", // Name of the data provider. Displays as a tooltip when hovering over the logo. Also displays as a fallback if the source address for the image is broken.\n      logoSourceAddress:\n        \"https://www.threesixtygiving.org/wp-content/themes/360giving2020/assets/images/360-logos/360giving-main.svg\", // Source URL of the logo to display.\n      logoTargetAddress: \"https://grantnav.threesixtygiving.org/grant/\" + grant.grant_id, // Destination URL that the logo navigates to when selected.\n    },\n  };\n  return entity;\n}\n\ntype Triple = { grant_id: string; funder_id: string; recipient_id: string };\nfunction triples_to_excel(triples: Triple[]): ExcelValue {\n  const entity: ExcelEntity = {\n    type: \"Entity\",\n    text: \"Who funds with who\",\n    basicType: \"Error\",\n    basicValue: \"#VALUE!\",\n    properties: {\n      triples: mk_ExcelArray(\n        triples.map((triple) => [\n          mk_ExcelString(triple.grant_id),\n          mk_ExcelString(triple.funder_id),\n          mk_ExcelString(triple.recipient_id),\n        ])\n      ),\n    },\n  };\n  return entity;\n}\n\nfunction is_ExcelArray(value: ExcelValue): value is ExcelArray {\n  return value !== null && typeof value === \"object\" && \"type\" in value && value.type === \"Array\";\n}\n\n\nfunction is_ExcelEntity(value: ExcelValue): value is ExcelEntity {\n  return value !== null && typeof value === \"object\" && \"type\" in value && value.type === \"Entity\";\n}\n\n/**\n * AllGrants\n * @customfunction\n * @param {any[][]} array of grant sets returned by grants_received\n * @returns {any[][]} Concatenation of all the grant sets.\n */\n\nfunction AllGrants(entities: any[][]): any[][] {\n  try {\n    // empty array of triples\n    const all_grants: ExcelEntity[] = [];\n    for (let i = 0; i < entities.length; i++) {\n      for (let j = 0; j < entities[i].length; j++) {\n        //console.log(`row ${i} column ${j}`);\n        const entity = entities[i][j] as ExcelValue;\n        if (is_ExcelEntity(entity) && \"grants\" in entity.properties) {\n          const grants = entity.properties.grants;\n          if (is_ExcelArray(grants)) {\n            const rows = grants.elements.length;\n            //console.log(`${rows} grants`);\n            for (let r = 0; r < rows; r++) {\n              const grant = grants.elements[r][0] as ExcelValue;\n              if (is_ExcelEntity(grant) && \"grant_id\" in grant.properties) {\n                // thus we assume this is a grant, and otherwise ignore it\n                all_grants.push(grant);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (all_grants.length === 0) {\n      return [[{ type: \"String\", basicValue: \"No grants found\" }]];\n    }\n    const result : ExcelValue[][] = all_grants.map((grant) => [grant]);  // JSON.stringify(grant), \n    return result;\n  } catch (error) {\n    return [[{ type: \"String\", basicValue: `Error! ${error.message}` }]];\n  }\n}\n\n/**\n * Who funds with who\n * @customfunction\n * @param {any[][]} array of grant sets returned by grants_received\n * @returns {any[][]} The outcome.\n */\n\nfunction who_funds_with_who(entities: any[][]): any[][] {\n  try {\n    // empty array of triples\n    const all_grants: ExcelEntity[] = [];\n    for (let i = 0; i < entities.length; i++) {\n      for (let j = 0; j < entities[i].length; j++) {\n        //console.log(`row ${i} column ${j}`);\n        const entity = entities[i][j] as ExcelValue;\n        if (is_ExcelEntity(entity) && \"grants\" in entity.properties) {\n          const grants = entity.properties.grants;\n          if (is_ExcelArray(grants)) {\n            const rows = grants.elements.length;\n            //console.log(`${rows} grants`);\n            for (let r = 0; r < rows; r++) {\n              const grant = grants.elements[r][0] as ExcelValue;\n              if (is_ExcelEntity(grant) && \"grant_id\" in grant.properties) {\n                // thus we assume this is a grant, and otherwise ignore it\n                all_grants.push(grant);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // empty cache from org_id to name of the organization\n    const org_id_to_name: { [key: string]: string } = {};\n\n    // for each grant g in all_grants, make a triple\n    const triples: Triple[] = [];\n    for (let i = 0; i < all_grants.length; i++) {\n      const grant = all_grants[i];\n      const grant_id = grant.properties.grant_id as ExcelString;\n      const funder_id = grant.properties.funder_id as ExcelString;\n      const recipient_id = grant.properties.recipient_id as ExcelString;\n      triples.push({ grant_id: grant_id.basicValue, funder_id: funder_id.basicValue, recipient_id: recipient_id.basicValue });\n  \n      // cache the names of the funder and recipient (we only remember last name for each org_id)\n      const funder = grant.properties.funder as ExcelString;\n      const recipient = grant.properties.recipient as ExcelString;\n      org_id_to_name[funder_id.basicValue] = funder.basicValue;\n      org_id_to_name[recipient_id.basicValue] = recipient.basicValue;\n    }\n\n    // make an array of all the unique funders\n    const funder_ids = Array.from(new Set(triples.map((triple) => triple.funder_id)));\n\n    // make an array of all the unique recipients\n    const recipient_ids = Array.from(new Set(triples.map((triple) => triple.recipient_id)));\n\n    // for each recipient r, funders_of_recipient[r] is the set of its funders\n    const funders_of_recipient: { [key: string]: Set<string> } = {};\n    for (let i = 0; i < recipient_ids.length; i++) funders_of_recipient[recipient_ids[i]] = new Set<string>();\n    // record the funders for each recipient\n    for (let i = 0; i < triples.length; i++) {\n      const triple = triples[i];\n      funders_of_recipient[triple.recipient_id].add(triple.funder_id);\n    }\n\n    const count: { [pair_funders: string]: number } = {};\n    // for each recipients, enumerate the pairs of funders, and count them\n    for (let r = 0; r < recipient_ids.length; r++) {\n      const recipient = recipient_ids[r];\n      const funders = funders_of_recipient[recipient];\n      // calculate all permutations in funder pairs\n      const funder_array = Array.from(funders);\n      for (let i = 0; i < funder_array.length; i++) {\n        for (let j = 0; j < funder_array.length; j++) {\n          if (i !== j) {\n            const key = funder_array[i] + \";\" + funder_array[j];\n            count[key] = (count[key] || 0) + 1;\n          }\n        }\n      }\n    }\n\n    // enumerate the dictionary\n    const outcome: [ExcelString, ExcelString, ExcelDouble][] = [];\n    for (const [key, value] of Object.entries(count)) {\n      const arr: string[] = key.split(\";\");\n      outcome.push([\n        { type: \"String\", basicValue: org_id_to_name[arr[0]] },\n        { type: \"String\", basicValue: org_id_to_name[arr[1]] },\n        { type: \"Double\", basicValue: value },\n      ]);\n    }\n\n    // sort the outcome by the count\n    outcome.sort((a, b) => b[2].basicValue - a[2].basicValue);\n\n    return outcome;\n  } catch (error) {\n    return [[{ type: \"String\", basicValue: `Error! ${error.message}` }]];\n  }\n}\n\nCustomFunctions.associate(\"GRANTS_RECEIVED\", grants_received);\nCustomFunctions.associate(\"GRANTS_MADE\", grants_made);\nCustomFunctions.associate(\"ALLGRANTS\", AllGrants);\nCustomFunctions.associate(\"WHO_FUNDS_WITH_WHO\", who_funds_with_who);","// for accessing findThatCharity.org\n/* global clearInterval, console, CustomFunctions, setInterval */\n\nimport {\n  Card,\n  ExcelValue,\n  ExcelArray,\n  ExcelDouble,\n  ExcelEntity,\n  ExcelError,\n  ExcelFormattedNumber,\n  ExcelString,\n} from \"./types\";\nimport { nullErrorValue, mk_ExcelArray, mk_ExcelString, mk_ExcelDouble } from \"./types\";\nimport { value_to_excel, string_to_date, number_to_amount } from \"./types\";\n\ntype Charity = {\n  id: string;\n  name: string;\n  charityNumber: string;\n  companyNumber: string;\n  description: string;\n  url: string;\n  latestFinancialYearEnd: string;\n  latestIncome: number;\n  latestSpending: number;\n  latestEmployees: number;\n  latestVolunteers: number;\n  trusteeCount: number;\n  dateRegistered: string;\n  dateRemoved: string | null;\n  active: boolean;\n  parent: string | null;\n  organisationType: Array<string>;\n  organisationTypePrimary: string;\n  alternateName: Array<string>;\n  telephone: string;\n  email: string;\n  location: Array<{\n    id: string;\n    name: string;\n    geoCode: string;\n    type: string;\n  }>;\n  address: {\n    streetAddress: string;\n    addressLocality: string;\n    postalCode: string;\n  };\n  sources: Array<string>;\n  links: Array<{\n    site: string;\n    url: string;\n    orgid: string;\n  }>;\n  orgIDs: Array<string>;\n  linked_records: Array<{\n    orgid: string;\n    url: string;\n  }>;\n  dateModified: string;\n};\n\n\nlet promiseChain: Promise<Charity | Error> = Promise.resolve({} as Charity);\n\nasync function directCall(url: string): Promise<Charity | Error> {\n  // Wait (in milliseconds) before each request to not go over the usage limit\n  await new Promise((resolve) => setTimeout(resolve, 200));\n  const response = await fetch(url, { method: \"GET\" });\n  if (!response.ok) {\n    console.error(`Error! status: ${response.status}`);\n    return new Error(`Error! status: ${response.status}`);\n  }\n  const charity = (await response.json()) as Charity;\n  //console.log(charity);\n  return charity;\n}\n\nasync function directCallSequentially(url: string): Promise<Charity | Error> {\n  const result = promiseChain.then(() => directCall(url));\n  promiseChain = result.catch(() => new Error(\"Error: unexpected exception\")); // agai n, unsure about this\n  return result;\n}\n\n\n\n/**\n * FindThatCharity\n * @customfunction\n * @param {string} org_id\n * @returns {any} Results of the query.\n */\nasync function findThatCharityTest(org_id: string) {\n  const API_URL = \"https://findthatcharity.uk/orgid/\";\n  const url = API_URL + org_id + \".json\";\n  const charity_or_error = await directCallSequentially(url);\n  const test = charity_or_error.name;\n  const entity = {\n    type: \"Entity\",\n    text: `findThatCharity ${test}`,\n    properties: {\n      charity_or_error: test\n    },\n  };\n  return entity;\n}\n\n// TODO: delete source url below\nconst provider_findThatCharity = {\n  description: \"FindThatCharity\", // Name of the data provider. Displays as a tooltip when hovering over the logo. Also displays as a fallback if the source address for the image is broken.\n  logoSourceAddress:\n    \"https://www.threesixtygiving.org/wp-content/themes/360giving2020/assets/images/360-logos/360giving-main.svg\", // Source URL of the logo to display.\n  logoTargetAddress: \"https://findthatcharity.uk\", // Destination URL that the logo navigates to when selected.\n};\n\nfunction charity_to_excel(org_url: string, charity: Charity): ExcelValue {\n  const entity: ExcelEntity = {\n    type: \"Entity\",\n    basicType: \"Error\",\n    basicValue: \"#VALUE!\",\n    text: charity.name,\n    properties: {\n      name: mk_ExcelString(charity.name),\n      organisationTypePrimary: mk_ExcelString(charity.organisationTypePrimary),\n      description: value_to_excel(charity.description),\n      latestFinancialYearEnd: string_to_date(charity.latestFinancialYearEnd) as ExcelValue,\n      latestIncome: charity.latestIncome == null ? nullErrorValue : number_to_amount(charity.latestIncome, \"GBP\"),\n      latestSpending: charity.latestSpending == null ? nullErrorValue : number_to_amount(charity.latestSpending, \"GBP\"),\n      latestEmployees: value_to_excel(charity.latestEmployees),\n      latestVolunteers: value_to_excel(charity.latestVolunteers),\n      trusteeCount: value_to_excel(charity.trusteeCount),\n\n      telephone: value_to_excel(charity.telephone),\n      email: value_to_excel(charity.email),\n      location: mk_ExcelString(charity.location.map((loc) => loc.name).join(\",\")),\n      address: mk_ExcelString(charity.address.streetAddress + \", \" + charity.address.addressLocality + \", \" + charity.address.postalCode),\n      url: value_to_excel(charity.url),\n\n      id: mk_ExcelString(charity.id),\n      charityNumber: value_to_excel(charity.charityNumber),\n      companyNumber: value_to_excel(charity.companyNumber),\n      active: { type: \"Boolean\", basicValue: charity.active },\n      dateRegistered: string_to_date(charity.dateRegistered) as ExcelValue,\n      dateRemoved: (charity.dateRemoved == null ? \"not applicable\" : string_to_date(charity.dateRemoved)) as ExcelValue,\n\n      parent: value_to_excel(charity.parent),\n      organisationType: mk_ExcelString(charity.organisationType.join(\",\")),\n      alternateName: mk_ExcelString(charity.alternateName.join(\",\")),\n\n      sources: mk_ExcelString(charity.sources.join(\",\")),\n      links: mk_ExcelString(charity.links.map((link) => link.site + \": \" + link.url).join(\",\")),\n      orgIDs: mk_ExcelString(charity.orgIDs.join(\",\")),\n      linked_records: mk_ExcelString(charity.linked_records.map((rec) => rec.orgid + \": \" + rec.url).join(\",\")),\n      dateModified: string_to_date(charity.dateModified) as ExcelValue,\n      raw_charity_data: value_to_excel(charity),\n    },\n    layouts: {\n      compact: { icon: \"Organization\" },\n      card: {\n        title: { property: \"name\" },\n        sections: [\n          {\n            layout: \"List\",\n            properties: [\"description\"],\n          },\n          {\n            layout: \"List\",\n            title: `${charity.active ? \"Active\" : \"Inactive\"} ${charity.organisationTypePrimary}, number ${charity.charityNumber} since ${charity.dateRegistered}`,\n            properties: [\n              \"id\",\n              \"charityNumber\",\n              \"companyNumber\",\n              \"organisationTypePrimary\",\n              \"active\",\n              \"dateRegistered\",\n              \"dateRemoved\",\n              \"parent\",\n              \"organisationType\",\n              \"alternateName\",\n            ],\n            collapsible: true,\n            collapsed: true,\n          },\n          {\n            layout: \"List\",\n            title: \"People and Financials\",\n            properties: [\n              \"latestFinancialYearEnd\",\n              \"latestIncome\",\n              \"latestSpending\",\n              \"latestEmployees\",\n              \"latestVolunteers\",\n              \"trusteeCount\",\n            ],\n            collapsible: true,\n            collapsed: false,\n          },\n          {\n            layout: \"List\",\n            title: \"Contact\",\n            properties: [\"telephone\", \"email\", \"address\", \"url\"],\n            collapsible: true,\n            collapsed: false,\n          },\n          {\n            layout: \"List\",\n            title: \"More\",\n            properties: [\n              \"sources\",\n              \"location\",\n              \"links\",\n              \"orgIDs\",\n              \"linked_records\",\n              \"dateModified\",\n              \"raw_charity_data\",\n            ],\n            collapsible: true,\n            collapsed: true,\n          },\n        ],\n      },\n    },\n    provider: {\n      description: charity.name + \" on FindThatCharity\", // Name of the data provider. Displays as a tooltip when hovering over the logo. Also displays as a fallback if the source address for the image is broken.\n      logoSourceAddress:\n        \"https://www.threesixtygiving.org/wp-content/themes/360giving2020/assets/images/360-logos/360giving-main.svg\", // Source URL of the logo to display.\n      logoTargetAddress: org_url, // Destination URL that the logo navigates to when selected.\n    },\n  };\n  return entity;\n}\n\nconst cache: { [org_id: string]: ExcelValue } = {};\n/**\n * FindThatCharity\n * @customfunction\n * @param {string} org_id\n * @returns {any} Results of the query.\n */\nasync function findThatCharity(org_id: string) {\n  if (cache[org_id]) {\n    console.log(`Cache hit for ${org_id}`);\n    return cache[org_id];\n  }\n  const API_URL = \"https://findthatcharity.uk/orgid/\";\n  const org_url = API_URL + org_id;\n  const charity_or_error = await directCallSequentially(org_url + \".json\");\n  if (charity_or_error instanceof Error) {\n    return {\n      type: \"Entity\",\n      text: `${org_id} not found on FindThatCharity`,\n      properties: { error: charity_or_error.message },\n      provider: provider_findThatCharity,\n    };\n  }\n  const charity = charity_or_error as Charity;\n  const result = charity_to_excel(org_url, charity);\n  cache[org_id] = result; // NB not caching errors, so will retry\n  return result;\n}\n\nCustomFunctions.associate(\"FINDTHATCHARITYTEST\", findThatCharityTest);\nCustomFunctions.associate(\"FINDTHATCHARITY\", findThatCharity);","/* global clearInterval, console, CustomFunctions, setInterval */\n\n// Documentation: https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-data-types-overview\n// Types of custom functions: https://learn.microsoft.com/en-us/office/dev/add-ins/excel/custom-functions-json-autogeneration\n// Data type explorer: https://github.com/OfficeDev/Office-Add-in-samples/blob/main/Samples/excel-data-types-explorer/src/taskpane/taskpane.ts\n// Excel PIVOTBY: https://support.microsoft.com/en-us/office/pivotby-function-de86516a-90ad-4ced-8522-3a25fac389cf\n\n// How different types of Excel values to be returned to Excel\nexport type ExcelValue =\n  | number\n  | string\n  | ExcelEntity\n  | ExcelArray\n  | ExcelString\n  | ExcelDouble\n  | ExcelBoolean\n  | ExcelError\n  | ExcelFormattedNumber;\n\nexport type ExcelEntity = {\n  type: \"Entity\";\n  text: string;\n  basicType: \"Error\"; // probably should be optional, as the value is forced to this anyway\n  basicValue: \"#VALUE!\"; // ditto.\n  properties: { [key: string]: ExcelValue };\n  provider?: { description: string; logoSourceAddress: string; logoTargetAddress: string };\n  layouts?: {\n    compact?: {\n      icon: string; // eg \"Gift\" see icon list here: https://learn.microsoft.com/en-us/javascript/api/excel/excel.entitycompactlayouticons\n    };\n    card?: Card;\n  };\n};\n\nexport type ExcelArray = { type: \"Array\"; elements: Array<Array<ExcelValue>> }; // elements cannot be the empty array\nexport type ExcelString = { type: \"String\"; basicValue: string };\nexport type ExcelDouble = { type: \"Double\"; basicValue: number };\nexport type ExcelBoolean = { type: \"Boolean\"; basicValue: boolean };\nexport type ExcelError = { type: \"Error\"; basicType: \"Error\"; basicValue: string };\nexport type ExcelFormattedNumber = {\n  type: \"FormattedNumber\";\n  basicValue: number;\n  numberFormat: string;\n  propertyMetadata?: { sublabel: string };\n};\n\nexport const nullErrorValue: ExcelError = {\n  type: \"Error\",\n  basicType: \"Error\",\n  basicValue: \"#NULL!\",\n};\n\nexport function mk_ExcelString(value: string): ExcelString {\n  return { type: \"String\", basicValue: value };\n}\nexport function mk_ExcelDouble(value: number): ExcelDouble {\n  return { type: \"Double\", basicValue: value };\n}\n\nexport function mk_ExcelArray(elements: Array<Array<ExcelValue>>): ExcelValue {\n  if (elements.length == 0) {\n    return nullErrorValue;\n  }\n  return { type: \"Array\", elements: elements };\n}\n\n// example of a layout card\nconst card: Card = {\n  title: {\n    property: \"Product Name\",\n  },\n  mainImage: {\n    property: \"Image\",\n  },\n  sections: [\n    {\n      layout: \"List\",\n      properties: [\"Product ID\"],\n    },\n    {\n      layout: \"List\",\n      title: \"Quantity and price\",\n      collapsible: true,\n      collapsed: false, // This section will not be collapsed when the card is opened.\n      properties: [\"Quantity Per Unit\", \"Unit Price\"],\n    },\n    {\n      layout: \"List\",\n      title: \"Additional information\",\n      collapsible: true,\n      collapsed: true, // This section will be collapsed when the card is opened.\n      properties: [\"Discontinued\"],\n    },\n  ],\n};\n\nexport type Card = {\n  title: { property: string };\n  mainImage?: { property: string };\n  sections: Array<{\n    layout: \"List\";\n    title?: string;\n    collapsible?: boolean;\n    collapsed?: boolean;\n    properties: Array<string>;\n  }>;\n};\n\nexport function value_to_excel(value: any): ExcelValue {\n  // recall that typeof null == \"object\"\n  if (value == null) return nullErrorValue;\n  switch (typeof value) {\n    case \"boolean\":\n      return {\n        type: \"Boolean\",\n        basicValue: value,\n      };\n\n    case \"string\":\n      return {\n        type: \"String\",\n        basicValue: value,\n      };\n\n    case \"number\":\n      return {\n        type: \"Double\",\n        basicValue: value,\n      };\n\n    case \"object\":\n      if (value.constructor === Array) {\n        const length = value.length;\n        if (length == 0) return nullErrorValue; // Excel has no empty arrays\n\n        var rows = new Array(length);\n        for (var i = 0; i < length; i++) rows[i] = [value_to_non_array_excel(value[i])];\n        return mk_ExcelArray(rows);\n      }\n\n      const obj = value as Object;\n      var keys = \"\";\n      var outcome: { [key: string]: ExcelValue } = {};\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          var lowerKey = key.toLowerCase();\n          while (\n            outcome.hasOwnProperty(lowerKey) // make the lower case key unique, if need be\n          )\n            lowerKey += \"9\";\n          const value = obj[key];\n          outcome[lowerKey] = value_to_excel(value);\n          const ty = typeof value;\n          const scalar = ty === \"boolean\" || ty === \"number\" || ty === \"string\";\n          var keyvalue = lowerKey + (scalar ? \"=\" + value.toString() : \"\");\n          if (keys == \"\") keys = keyvalue;\n          else keys = keys + \",\" + keyvalue;\n        }\n      }\n\n      return {\n        type: \"Entity\",\n        basicType: \"Error\",\n        basicValue: \"#VALUE!\",\n        text: keys,\n        properties: outcome,\n      };\n\n    default:\n      return {\n        type: \"String\",\n        basicValue: \"DEFAULT - unexpected\",\n      };\n  }\n}\n\n// Excel does not support an array nested inside another, so wrap in an entity\nfunction value_to_non_array_excel(value: any): ExcelValue {\n  if (value == null) return nullErrorValue;\n  const excel = value_to_excel(value);\n  switch (typeof value) {\n    case \"object\":\n      if (value.constructor === Array) {\n        return {\n          type: \"Entity\",\n          basicType: \"Error\",\n          basicValue: \"#VALUE!\",\n          text: \"Nested array\",\n          properties: { array: excel },\n        };\n      }\n      return excel;\n\n    default:\n      return excel;\n  }\n}\n\n/**\n * GET JSON from URL.\n * @customfunction\n * @param {string} url\n * @returns {any} Results of the query.\n */\nasync function get_json(url) {\n  const options = {\n    method: \"GET\",\n  };\n\n  //console.log(url);\n  //console.log(options);\n\n  try {\n    const response = await fetch(url, options);\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return value_to_excel(result);\n  } catch (err) {\n    console.log(err);\n    return value_to_excel(\"caught: \" + err.message);\n  }\n}\n\n/**\n * GET JSON lines from URL.\n * @customfunction\n * @param {string} url\n * @returns {any} Results of the query.\n */\nasync function get_json_lines(url) {\n  const options = {\n    method: \"GET\",\n  };\n\n  //console.log(url);\n  //console.log(options);\n\n  try {\n    const response = await fetch(url, options);\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n\n    const text = await response.text();\n    const jsons = await text.split(\"\\n\");\n    var N = jsons.length - 1; // last entry will be an empty string following last \"\\n\"\n    var array = new Array(N);\n    for (var i = 0; i < N; i++) {\n      const json = jsons[i];\n      try {\n        array[i] = JSON.parse(jsons[i]);\n      } catch (err) {\n        array[i] = \"error parsing: \" + json + \"length \" + json.length;\n        //console.log(array[i]);\n      }\n    }\n    const excel = value_to_excel({ lines: array });\n    //console.log(array);\n    return excel;\n  } catch (err) {\n    console.log(err);\n    return value_to_excel(\"caught: \" + err.message);\n  }\n}\n\n/**\n * POST JSON to URL.\n * @customfunction\n * @param {string} url\n * @param {any} json_data\n * @returns {any} Results of the query.\n */\nasync function post_json(url, json_data) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: json_data,\n  };\n\n  //console.log(options);\n\n  try {\n    const response = await fetch(url, options);\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return value_to_excel(result);\n  } catch (err) {\n    console.log(err);\n    return value_to_excel(\"caught: \" + err.message);\n  }\n}\n\n/**\n * Encode part of URI\n * @customfunction\n * @param {string} text\n * @returns {string} URI encoded text\n */\nfunction encodeURI(text: string) {\n  return encodeURIComponent(text);\n}\n\n/**\n * Constructs a Yellow entity\n * @customfunction\n * @param {string} json\n * @returns {any} Yellow value\n */\nfunction parse_JSON(json: string) {\n  const obj = JSON.parse(json);\n  return value_to_excel(obj);\n}\n\n// 2021-03-08\n// 2021-01-19T00:00:00+00:00\n\n/**\n * Interpret string as Excel date\n * @customfunction\n * @param {string} date\n * @returns {any} Results of the query.\n */\nexport function string_to_date(date_as_string: string) {\n  // Excel date is number of days since 1900-01-01\n  // https://stackoverflow.com/questions/70804856/convert-javascript-date-object-to-excel-serial-date-number\n  const date = new Date(date_as_string);\n  let days = 25569.0 + (date.getTime() - date.getTimezoneOffset() * 60 * 1000) / (1000 * 60 * 60 * 24);\n  return {\n    type: \"FormattedNumber\",\n    basicValue: days,\n    numberFormat: \"yyyy-mm-dd\",\n  };\n}\n\nexport function number_to_amount(number: number, currency: string): ExcelFormattedNumber {\n  return {\n    type: \"FormattedNumber\",\n    basicValue: number,\n    numberFormat: currency == \"GBP\" ? \"£* #,##0.00\" : \"* #,##0.00\",\n    propertyMetadata: {\n      sublabel: currency,\n    },\n  };\n}\n\nCustomFunctions.associate(\"GET_JSON\", get_json);\nCustomFunctions.associate(\"GET_JSON_LINES\", get_json_lines);\nCustomFunctions.associate(\"POST_JSON\", post_json);\nCustomFunctions.associate(\"ENCODEURI\", encodeURI);\nCustomFunctions.associate(\"PARSE_JSON\", parse_JSON);\nCustomFunctions.associate(\"STRING_TO_DATE\", string_to_date);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(6229);\n__webpack_require__(80490);\nvar __webpack_exports__ = __webpack_require__(36133);\n"],"names":["types_1","require","types_2","cache","promiseChain","Promise","resolve","fetchPaginatedListSequentially","url","result","then","options","method","console","log","concat","results","page","cursor","start","Date","now","setTimeout","_a","sent","fetch","response","ok","json","error","status","data","end","count","push","apply","next","fetchPaginatedList","catch","Error","provider360Giving","description","logoSourceAddress","logoTargetAddress","grant_to_excel","grant","amountAwarded","number_to_amount","currency","funder","fundingOrganization","map","org","name","join","recipient","recipientOrganization","funder_id","id","recipient_id","type","basicType","basicValue","text","title","properties","mk_ExcelString","awardDate","string_to_date","grant_id","grant_nav","layouts","compact","icon","card","property","sections","layout","collapsible","collapsed","provider","is_ExcelArray","value","is_ExcelEntity","CustomFunctions","associate","org_id","API_URL","message","grants","length","mk_ExcelArray","entities","all_grants","i","j","entity","rows","elements","r","org_id_to_name","triples","Array","from","Set","triple","recipient_ids","funders_of_recipient","add","funders","funder_array","key","outcome","_i","Object","entries","_b","arr","split","sort","a","b","directCallSequentially","directCall","provider_findThatCharity","charity_or_error","test","org_url","charity","organisationTypePrimary","value_to_excel","latestFinancialYearEnd","latestIncome","nullErrorValue","latestSpending","latestEmployees","latestVolunteers","trusteeCount","telephone","email","location","loc","address","streetAddress","addressLocality","postalCode","charityNumber","companyNumber","active","dateRegistered","dateRemoved","parent","organisationType","alternateName","sources","links","link","site","orgIDs","linked_records","rec","orgid","dateModified","raw_charity_data","charity_to_excel","exports","constructor","length_1","value_to_non_array_excel","obj","keys","hasOwnProperty","lowerKey","toLowerCase","value_1","ty","keyvalue","toString","excel","array","date_as_string","date","getTime","getTimezoneOffset","numberFormat","number","propertyMetadata","sublabel","err_1","jsons","N","JSON","parse","err","lines","err_2","json_data","headers","body","err_3","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","call"],"sourceRoot":""}